import { Button, FormControl, Input, InputLabel } from "@mui/material";
import type { NextPage } from "next";
import Head from "next/head";
import Image from "next/image";
import {
  ChangeEvent,
  useState,
  useContext,
  FormEventHandler,
  useReducer,
  useEffect,
  SetStateAction,
  Dispatch,
} from "react";
import styles from "../styles/Home.module.css";
import io, { Socket } from "socket.io-client";
import { DefaultEventsMap } from "socket.io/dist/typed-events";
import { SocketContext } from "../context/socket";

type User = {
  id: string;
  name: string;
};

type Room = { roomId: string; participants: User[] };
type State = Room[];
type Action = {
  type: string;
  payload: Room;
};

function reducer(state: State, action: Action): State {
  switch (action.type) {
    case "add":
      return [...state, action.payload];
    default:
      throw new Error();
  }
}

export const getServerSideProps = ({ res }: any) => ({
  props: {
    allRooms: res.rooms,
  },
});

interface HomeProps {
  allRooms: Room[];
}

const Home: NextPage<HomeProps> = ({ allRooms }) => {
  const [name, setName] = useState("my_room");
  const [userName, setUserName] = useState("username");
  const [rooms, dispatch] = useReducer(reducer, allRooms);
  const socket = useContext(SocketContext);

  const handleChange =
    (setter: Dispatch<SetStateAction<string>>) =>
    async (event: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
      setter(event.target.value);
    };

  const createRoom: FormEventHandler<HTMLFormElement> = (event) => {
    event.preventDefault();
    socket.emit("createRoom", { roomId: name, userName });
  };

  useEffect(() => {
    socket.on("room created", (payload: Room) => {
      console.log("recieved event");
      dispatch({ type: "add", payload });
    });

    socket.on("connect", () => {
      console.log("connected");
    });

    return () => {
      socket.removeAllListeners();
    };
  }, [socket]);

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
        <h1 className={styles.title}>
          Welcome to <a>This Shit</a>
        </h1>
        <div>
          <InputLabel>your username </InputLabel>
          <Input
            id="component-simple"
            value={userName}
            onChange={handleChange(setUserName)}
            className={styles.code}
          />
        </div>
        <form className={styles.description} onSubmit={createRoom}>
          <Input
            id="component-simple"
            value={name}
            onChange={handleChange(setName)}
            className={styles.code}
          />
          <Button variant="outlined" type="submit">
            <b>Create Room</b>
          </Button>
        </form>

        <div className={styles.grid}>
          {rooms.map(({ roomId, participants }) => {
            return (
              <a key={roomId} className={styles.card}>
                <h2>{roomId}</h2>
                <p>
                  {participants.map((user) => {
                    return <span key={user.name}>{user.name}</span>;
                  })}
                </p>
              </a>
            );
          })}
        </div>
      </main>

      <footer className={styles.footer}>
        <a
          href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
          target="_blank"
          rel="noopener noreferrer"
        >
          Powered by{" "}
          <span className={styles.logo}>
            <Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
          </span>
        </a>
      </footer>
    </div>
  );
};

export default Home;
